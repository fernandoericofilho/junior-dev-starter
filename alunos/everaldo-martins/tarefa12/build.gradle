plugins {
    id 'jacoco'
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.junior-dev-starter'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-hateoas'
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.flywaydb:flyway-core'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.9'
    implementation 'org.mapstruct:mapstruct:1.5.5.Final'
	compileOnly 'org.projectlombok:lombok'
    compileOnly 'org.slf4j:slf4j-api:2.0.16'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.5.Final'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.mockito:mockito-junit-jupiter")
}

tasks.named('test') {
	useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.12"
}

tasks.test {
    useJUnitPlatform()
    finalizedBy(tasks.jacocoTestReport)
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        html.required.set(true)
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'com/junior_dev_starter/tarefa10/Application*',
                        'com/junior_dev_starter/tarefa10/assemblers',
                        'com/junior_dev_starter/tarefa10/configs/**',
                        'com/junior_dev_starter/tarefa10/dtos/**',
                        'com/junior_dev_starter/tarefa10/exceptions/**',
                        'com/junior_dev_starter/tarefa10/mappers/**',
                        'com/junior_dev_starter/tarefa10/enums/*'
                ])
            })
    )
}

tasks.jacocoTestCoverageVerification {
    dependsOn(tasks.test)

    violationRules {
        rule {
            limit {
                minimum = 0.90
            }
        }
        rule {
            element = "CLASS"
            limit {
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = 0.80
            }
        }
    }

    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'com/junior_dev_starter/tarefa10/Application*',
                        'com/junior_dev_starter/tarefa10/assemblers',
                        'com/junior_dev_starter/tarefa10/configs/**',
                        'com/junior_dev_starter/tarefa10/dtos/**',
                        'com/junior_dev_starter/tarefa10/exceptions/**',
                        'com/junior_dev_starter/tarefa10/mappers/**',
                        'com/junior_dev_starter/tarefa10/enums/*'
                ])
            })
    )
}

tasks.check {
    dependsOn(tasks.jacocoTestCoverageVerification)
}
